// generate root vars
@mixin generate-root-vars {
    @each $name in $global-scales {
        $map: scale($name);
        @each $key, $val in $map {
            --#{$name}-#{$key}: #{$val};
        }
    }
}

// generate root palette
@mixin generate-root-palette($map) {
    @if $map != null {
        @each $name, $value in $map {
            $name: str-replace(#{$name}, '-opacity', '');
            @if type-of($value) == map {
                @each $key, $color in $value {
                    --palette-#{$name}-#{$key}: #{$color};
                }
            }
            @else {
                --palette-#{$name}: #{$value};
            }
        }
    }
}

// generate root colors
@mixin generate-root-colors($map) {
    @if $map != null {
        @each $name, $value in $map {
            @if $name != shadow {
                @each $key, $val in $value {
                    @if type-of($val) == map {
                        @each $n, $i in $val {
                            --#{$name}-#{$key}-#{$n}: #{$i};
                        }
                    }
                    @else {
                        --#{$name}-#{$key}: #{$val};
                    }
                }
            }
        }

        // shadows
        $shadows: map-get($map, shadow);
        @each $key, $val in $shadows {
            @if type-of($val) == map {
                --shadow-#{$key}: #{map-values($val)};
            }
            @else {
                --shadow-#{$key}: #{$val};
            }
        }
    }
}

// colors
@mixin generate-colors($modulename) {
    $map: color($modulename);
    @if $map != null {
        @each $variant, $value in $map {
            $sel: '&';
            @if $variant != default {
                $sel: '&.' + $modulename + '-' + $variant;
            }
            #{$sel} {
                @each $name, $val in $value {
                    @if type-of($val) == map {
                        @if $name == box-shadow {
                            --#{$modulename}-#{$name}: #{map-values($val)};
                        }
                        @else {
                            @each $key, $index in $map {
                                --#{$modulename}-#{$name}-#{$key}: $val;
                            }
                        }
                    }
                    @else {
                        --#{$modulename}-#{$name}: var(--#{$modulename}-#{$variant}-#{$name});
                    }
                }
            }
        }
    }
}

// type
@mixin generate-type($name) {
    $map: map-deep-get(scale(type), $name);
    @if $map != null {
        @if map-has-key($map, default) {
            & {
                @include generate-type-item($name, map-get($map, default));
            }
        }
        @each $key, $value in $map {
            @if $key != default {
                $sel: '&-' + $key;
                #{$sel} {
                    @include generate-type-item($name, $value);
                }
            }
        }
    }
}

// type item
@mixin generate-type-item($name, $value) {
    $size: $value;
    $line: false;
    @if type-of($value) == list {
        $size: nth($value, 1);
        $line: nth($value, 2);
    }

    --#{$name}-font-size: #{$size};
    @if $line != false {
        --#{$name}-line-height: #{$line};
    }
}

// base headings
@mixin generate-base-headings($map, $breakpoint) {
    @if map-has-key($map, base) {
        $headings: h1, h2, h3, h4, h5, h6;
        $obj: map-deep-get($map, base);
        @each $key, $val in $headings {
            @if map-has-key($obj, $key) {
                #{$key} {
                    --heading-font-size: #{type-size(base, $key, $breakpoint)};
                    --heading-line-height: #{type-line(base, $key, $breakpoint)};
                }
            }
        }
    }
}

// text size
@mixin generate-text-size($map, $breakpoint) {
    $obj: map-get($map, text);
    @each $key, $val in $obj {
        @if (type-of($val) == 'list') {
            &-#{$key} {
                --text-font-size: #{type-size(text, $key, $breakpoint)};
                --text-line-height: #{type-line(text, $key, $breakpoint)};
            }
            @if (length($val) == 3) {
                &-#{$key}-alt {
                    --text-font-size: #{type-size(text, $key, $breakpoint)};
                    --text-line-height: #{type-line-alt(text, $key, $breakpoint)};
                }
            }
        }
    }
}

// heading size
@mixin generate-heading-size($map, $breakpoint) {
    $obj: map-get($map, heading);
    @each $key, $val in $obj {
        @if (type-of($val) == 'list') {
            &-#{$key} {
                --heading-font-size: #{type-size(heading, $key, $breakpoint)};
                --heading-line-height: #{type-line(heading, $key, $breakpoint)};
            }
            @if (length($val) == 3) {
                &-#{$key}-alt {
                    --heading-font-size: #{type-size(heading, $key, $breakpoint)};
                    --heading-line-height: #{type-line-alt(heading, $key, $breakpoint)};
                }
            }
        }
    }
}